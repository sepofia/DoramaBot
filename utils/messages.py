"""
- bot messages dictionary with the same phrases in the different languages
"""

import pandas as pd

COLUMNS = {
    'ru': ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞', '–ñ–∞–Ω—Ä—ã', '–°—Ç—Ä–∞–Ω–∞']
    , 'en': ['Name', 'Description', 'KP rating', 'Genres', 'Country']
}

UNSUCCESSFUL_MESSAGE = {
    'ru': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ—Ä–∞–º—ã, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–ø–æ–∑–∂–µ ü•∫'
    , 'en': "Unfortunately I can't find a good K-drama for you now, you can try again a little later ü•∫"
}


def start(name: str, language: str) -> str:
    if language not in ['ru', 'en']:
        language = 'ru'
    if language == 'en':
        return f"Hello, {name}! üíñ My name is Ji Hyun, and I will help you find the best dramas on Kinopoisk!\n" \
               f"Do you want romance, drama, or something light and funny? I'll pick the perfect list for you! üòé\n\n" \
               f"*What I can do:*\n" \
               f"üîπ /last - I will send links to the 5 best recent dramas;\n" \
               f"üîπ /random - I 'll send you a link to a random drama;\n" \
               f"üîπ /select - I will find the dramas according to your request, " \
               f"taking into account their genre, year and country! ü´∂\n\n" \
               f"üí≠ If you have any suggestions (I'm really looking forward to it! ü§≠), " \
               f"questions or complaints üôÑ, then you can email my developer: @sepofia2.\n\n" \
               f"Now let's stock up on ramen and enjoy watching! üçú"
    if language == 'ru':
        return f'–ü—Ä–∏–≤–µ—Ç, {name}! üíñ –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–∂–∏ –•—ë–Ω, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –¥–æ—Ä–∞–º—ã –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ!\n' \
               f'–•–æ—á–µ—à—å —Ä–æ–º–∞–Ω—Ç–∏–∫–∏, –¥—Ä–∞–º—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –ª—ë–≥–∫–æ–µ –∏ —Å–º–µ—à–Ω–æ–µ? ' \
               f'–Ø –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫! üòé\n\n' \
               f'*–ß—Ç–æ —è —É–º–µ—é: * \n' \
               f'üîπ /last - –æ—Ç–ø—Ä–∞–≤–ª—é —Å—Å—ã–ª–∫–∏ –Ω–∞ 5 –ª—É—á—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Ä–∞–º;\n' \
               f'üîπ /random - –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Ä–∞–º—É;\n' \
               f'üîπ /select - –Ω–∞–π–¥—É –¥–æ—Ä–∞–º—ã –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É, —É—á–∏—Ç—ã–≤–∞—è –∏—Ö –∂–∞–Ω—Ä, –≥–æ–¥ –∏ —Å—Ç—Ä–∞–Ω—É! ü´∂\n\n' \
               f'üí≠ –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ª—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è _(–æ—á–µ–Ω—å –∂–¥—É! ü§≠)_, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∂–∞–ª–æ–±—ã üôÑ, ' \
               f'—Ç–æ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É –º–æ–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏—Ü–µ: @sepofia2.\n\n' \
               f'_–¢–µ–ø–µ—Ä—å - –∑–∞–ø–∞—Å–∞–µ–º—Å—è —Ä–∞–º—ë–Ω–æ–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–µ–º—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º!_ üçú'


def random_drama(drama: pd.DataFrame | pd.Series, language: str) -> str:
    header = {
        'ru': '–ó–¥–µ—Å—å —Ç–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–∞–º–∞:\n'
        , 'en': 'Here is your random K-drama:\n'
    }
    if language not in ['ru', 'en']:
        language = 'ru'
    text_items = [header[language]]
    for j, col in enumerate(COLUMNS['en']):
        if col == 'Name':
            item = f'[{drama[col]}]({drama["Link"]})'
        else:
            item = f'*{COLUMNS[language][j]}*: _{drama[col]}_'
        text_items.append(item)
    text_items.append('')
    return '\n'.join(text_items)


def last_dramas(dramas_df: pd.DataFrame, language: str) -> str:
    header = {
        'ru': '–ó–¥–µ—Å—å 5 –ª—É—á—à–∏—Ö –∫–æ—Ä–µ–π—Å–∫–∏—Ö –¥–æ—Ä–∞–º –∏–∑ –Ω–µ–¥–∞–≤–Ω–æ –≤—ã–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞:\n'
        , 'en': 'Here are 5 best last K-dramas by Kinopoisk rating:\n'
    }

    if language not in ['ru', 'en']:
        language = 'ru'

    if len(dramas_df) == 0:
        return UNSUCCESSFUL_MESSAGE[language]

    text_items = [header[language]]
    for i in range(len(dramas_df)):
        for j, col in enumerate(COLUMNS['en']):
            if col == 'Name':
                item = f'*{i + 1}.* [{dramas_df[col][i]}]({dramas_df["Link"][i]})'
                text_items.append(item)
            else:
                if dramas_df[col][i] != 'None':
                    item = f'*{COLUMNS[language][j]}*: _{dramas_df[col][i]}_'
                    text_items.append(item)
        text_items.append('')
    return '\n'.join(text_items)


def user_dramas(dramas_df: pd.DataFrame | None, language: str) -> str:
    header = {
        'ru': '–î–æ—Ä–∞–º—ã –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n'
        , 'en': 'K-dramas for your query:\n'
    }

    if language not in ['ru', 'en']:
        language = 'ru'

    if (dramas_df is None) or (len(dramas_df) == 0):
        return UNSUCCESSFUL_MESSAGE[language]

    text_items = [header[language]]
    text_items_short = [header[language]]
    for i in range(len(dramas_df)):
        for j, col in enumerate(COLUMNS['en']):
            if col == 'Name':
                item = f'*{i + 1}.* [{dramas_df[col][i]}]({dramas_df["Link"][i]})'
                text_items.append(item)
                text_items_short.append(item)
            else:
                if not (dramas_df[col][i] is None):
                    item = f'*{COLUMNS[language][j]}*: _{dramas_df[col][i]}_'
                    text_items.append(item)
                    if col not in ['Description', '–û–ø–∏—Å–∞–Ω–∏–µ']:
                        text_items_short.append(item)
        text_items.append('')
        text_items_short.append('')
    text = '\n'.join(text_items)
    text_short = '\n'.join(text_items_short)
    return text if len(text) < 4096 else text_short


def select(language: str) -> str:
    text = {
        'ru': '–î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –¥–æ—Ä–∞–º—É –ø–æ —Ç–≤–æ–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º! –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': "Let's choose K-dramas especially for you! First, choose a genre:"
                "\n_Send the_ /cancel _command to stop._"
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def genre(language: str) -> str:
    text = {
        'ru': '–ó–∞–ø–æ–º–Ω–∏–ª–∞! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': 'Memorize! Now select a minimum production year:'
                '\n_Send the_ /cancel _command to stop._'
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def year(language: str) -> str:
    text = {
        'ru': '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω—É:'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': 'Great! Then specify the county:'
                '\n_Send the_ /cancel _command to stop._'
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def country(language: str) -> str:
    text = {
        'ru': '–°–∫–æ–ª—å–∫–æ –¥–æ—Ä–∞–º –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?'
              '\n_–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É_ /cancel.\n'
        , 'en': 'How many K-drams do you want?'
                '\n_Send the_ /cancel _command to stop._'
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def count(language: str) -> str:
    text = {
        'ru': '–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Ä–∞–º—ã —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–µ?'
        , 'en': "And the last question: do you want to get the highest rated K-dramas or just random ones?"
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def cancel(language: str) -> str:
    text = {
        'ru': '–ù–µ –≤–æ–ø—Ä–æ—Å ;) \n–í—ã–±–µ—Ä–µ–º –¥–æ—Ä–∞–º—ã –¥–ª—è —Ç–µ–±—è –∫–∞–∫-–Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑!'
        , 'en': "Ok! We can choose K-dramas for you at any time ;)"
    }
    if language not in ['ru', 'en']:
        language = 'ru'

    return text[language]


def incorrect_message(language: str):
    if language == 'en':
        text = "Sorry, I don't understand your message üëÄ \nTry to use commands from menu"
    else:
        text = '–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É üëÄ \n–ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é'
    return text


def text_message(context: str, language: str):
    if '—Å–ø–∞—Å–∏–±–æ' in context.lower():
        text = '–†–∞–¥–∞, —á—Ç–æ —Å–º–æ–≥–ª–∞ –ø–æ–º–æ—á—å ü´∂'
    elif 'thank' in context.lower():
        text = "I was happy to help you ü´∂"
    else:
        return incorrect_message(language)
    return text
