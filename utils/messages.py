"""
it might be reasonable to add choosing language:
- in the separate function with the global LANGUAGE parameter for this file
- create dictionary with the same phrases in the different languages
"""

import pandas as pd

COLUMNS = {
    'ru': ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞', '–ñ–∞–Ω—Ä—ã', '–°—Ç—Ä–∞–Ω–∞']
    , 'en': ['Name', 'Description', 'KP rating', 'Genres', 'Countries']
}


def start(name: str, language: str) -> str:
    if language == 'en':
        return f'Hi {name}! Nice to see you here! \nWelcome to the world of K-dramas ü§ç'
    if language == 'ru':
        return f'–ü—Ä–∏–≤–µ—Ç, {name}, —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –∑–¥–µ—Å—å! \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¥–æ—Ä–∞–º ü§ç'


def help_message():
    pass


def random_drama(drama: pd.DataFrame | pd.Series, language: str) -> str:
    header = {
        'ru': '–ó–¥–µ—Å—å —Ç–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–∞–º–∞ –Ω–µ —Å—Ç–∞—Ä—à–µ 2016 –≥–æ–¥–∞ –∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –≤—ã—à–µ 7.1:\n'
        , 'en': 'Here is your random K-drama from 2016 to 2024 and with a kinopoisk rating of over 7.1:\n'
    }
    columns = {
        'ru': ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞', '–ñ–∞–Ω—Ä—ã', '–°—Ç—Ä–∞–Ω–∞']
        , 'en': ['Name', 'Description', 'KP rating', 'Genres', 'Countries']
    }
    text_items = [header[language]]
    for j, col in enumerate(['Name', 'Description', 'KP rating', 'Genres', 'Countries']):
        if col == 'Name':
            item = f'[{drama[col]}]({drama["Link"]})'
        else:
            item = f'*{columns[language][j]}*: _{drama[col]}_'
        text_items.append(item)
    text_items.append('')
    return '\n'.join(text_items)


def last_dramas(dramas_df: pd.DataFrame, language: str) -> str:
    header = {
        'ru': '–ó–¥–µ—Å—å 5 –ª—É—á—à–∏—Ö –∫–æ—Ä–µ–π—Å–∫–∏—Ö –¥–æ—Ä–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞:\n'
        , 'en': 'Here are 5 best last K-dramas by Kinopoisk rating:\n'
    }
    unsuccessful = {
        'ru': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–æ—Ä–∞–º—É –¥–ª—è —Ç–µ–±—è, –Ω–æ —è –µ—â—ë —É—á—É—Å—å ü•∫'
        , 'en': "Unfortunately I can't find a good K-drama for you now, but I'm still learning ü•∫"
    }

    if len(dramas_df) == 0:
        return unsuccessful[language]

    text_items = [header[language]]
    for i in range(len(dramas_df)):
        for j, col in enumerate(['Name', 'KP rating', 'Genres', 'Countries']):
            if col == 'Name':
                item = f'*{i + 1}.* [{dramas_df[col][i]}]({dramas_df["Link"][i]})'
            else:
                item = f'*{COLUMNS[language][j]}*: _{dramas_df[col][i]}_'
            text_items.append(item)
        text_items.append('')
    return '\n'.join(text_items)


def user_dramas(dramas_df: pd.DataFrame | None, language: str) -> str:

    unsuccessful = {
        'ru': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–æ—Ä–∞–º—É –ø–æ —Ç–≤–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º...\n'
              '–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: `/user_dramas genres.name –º–µ–ª–æ–¥—Ä–∞–º–∞ rating.kp 7.8-10 year 2019-2024`'
        , 'en': "Unfortunately I can't find good K-dramas for you by your recommendations...\n"
                "Example of query: `/user_dramas genres.name –º–µ–ª–æ–¥—Ä–∞–º–∞ rating.kp 7.8-10 year 2019-2024`"
    }
    header = {
        'ru': '–ó–¥–µ—Å—å 5 –ª—É—á—à–∏—Ö –∫–æ—Ä–µ–π—Å–∫–∏—Ö –¥–æ—Ä–∞–º –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n'
        , 'en': 'Here are best K-dramas for your query:\n'
    }

    if (dramas_df is None) or (len(dramas_df) == 0):
        return unsuccessful[language]

    text_items = [header[language]]
    for i in range(len(dramas_df)):
        for j, col in enumerate(['Name', 'KP rating', 'Genres', 'Countries']):
            if col == 'Name':
                item = f'*{i + 1}.* [{dramas_df[col][i]}]({dramas_df["Link"][i]})'
            else:
                item = f'*{COLUMNS[language][j]}*: _{dramas_df[col][i]}_'
            text_items.append(item)
        text_items.append('')
    return '\n'.join(text_items)
